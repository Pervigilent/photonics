% waveguide_analytic.m - Analytic solution of wabeguide
% One-dimensional analytic solution of waveguide
% Usage:
% (1) Get effective indices for supported modes
% [nTE, nTM] = waveguide_analytic_2 (1.56E-6, 0.22E-6, 1.444, 3.47, 1.444)
% (2) TEparam, TMparam: h, q, p are paraemters of the mode.

function [TE_index, TM_index, TE_param, TM_param] = waveguide_analytic(lambda,...
   thickness,...
   buried_index,...
   substrate_index,...
   cladding_index)
  resolution = 1E3;
  wavenumber = 2 * pi / lambda;
  beta = linspace(max([buried_index cladding_index]) * wavenumber,...
  substrate_index * wavenumber,...
  resolution);
  beta = beta(1 : end - 1);
  TE = TE_equation(beta,...
    wavenumber,...
    buried_index,...
    substrate_index,...
    cladding_index,...
    thickness);
  TM = TM_equation(beta,...
    wavenumber,...
    buried_index,...
    substrate_index,...
    cladding_index,...
    thickness);
  % TE mode
  intervals = (TE >= 0) - (TE < 0);
  zero_locations = find(diff(intervals) < 0);
  x_zero = [beta(zero_locations); beta(zero_locations + 1)]';
  [zero_number, scrap] = size(x_zero);
  for i = 1 : zero_number
    TE_index(i) = fzero(@(x) TE_equation(x,...
      wavenumber,...
      buried_index,...
      substrate_index,...
      cladding_index,...
      thickness),...
      x_zero(i, :)) / wavenumber;
      [TE_param(i, 1), TE_param(i, 2), TE_param(i, 3), TE_param(i, 4)] = TE_equation(TE_index(i) * wavenumber,...
        wavenumber,...
        buried_index,...
        substrate_index,...
        cladding_index,...
        thickness);
  end
  TE_index = TE_index(end : -1 : 1);
  TE_param = TE_param(end : -1 : 1, :);
  % TM mode
  intervals = (TM >= 0) - (TM < 0);
  zero_locations = find(diff(intervals) < 0);
  x_zero = [beta(zero_locations); beta(zero_locations + 1)]';
  [zero_number, scrap] = size(x_zero);
  for i = 1 : zero_number
    TM_index(i) = fzero(@(x) TM_equation(x,...
      wavenumber,...
      buried_index,...
      substrate_index,...
      cladding_index,...
      thickness), x_zero(i, :)) / wavenumber;
      [TM_param(i, 1), TM_param(i, 2), TM_param(i, 3), TM_param(i, 4)] = TM_equation(TM_index(i) * wavenumber,...
        wavenumber,...
        buried_index,...
        substrate_index,...
        cladding_index,...
        thickness);
  end
  if zero_number > 0
    TM_index = TM_index(end : -1 : 1);
    TM_param = TM_param(end : -1 : 1, :);
  else
    TM_index = [];
  end
end
  